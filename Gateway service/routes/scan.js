const express = require('express');
const router = express.Router();
const {
    checkParams
} = require('../utils/checkParams');
const FormData = require('form-data');
const CircuitBreaker = require('../lib/CircuitBreaker');

const circuitBreaker = new CircuitBreaker();

const getServicePost = async (serviceName) => {
    reqOptions = {
        method: "GET",
        url: `http://localhost:3001/seviceRegistry/find/${serviceName}`
    }
    let data = circuitBreaker.doRequest(reqOptions);
    return data;
}

const callService = async (formData, url, serviceName) => {
    let infoService = await getServicePost(serviceName);
    console.log("sfdfsdf", infoService)
    if(infoService) {
      reqOptions = {
          method: "POST",
          url: `http://${infoService.ip}:${infoService.port}${url}`,
          data: formData,
          headers: {
              ...formData.getHeaders(),
          },
      }

      let data = await circuitBreaker.doRequest(reqOptions);
      return data;
    }
    return infoService;
}

router.route('/ml/scan').post(async (req, res, next) => {
    const errorMessage = checkParams(req);

    if (errorMessage) {
        return res.status(400).json({
            success: false,
            data: {
                error: errorMessage,
            },
        });
    }

    const toScan = Array.isArray(req.files[process.env.APP_FORM_KEY]) ?
        req.files[process.env.APP_FORM_KEY] :
        [req.files[process.env.APP_FORM_KEY]];

    let responses = [];

    for (const file of toScan) {
        const formData = new FormData();
        formData.append(`file`, file.data, {
            filename: file.name,
            contentType: file.mimetype,
        });

        let data = await callService(formData, '/check_file', 'ml-service');
        if (data) {
          data.service = "ml-service"
          responses.push(data);
        }
    }

    if(responses.length === 0) {
      res.status(500).json("error");
    } else {
      res.status(200).json(responses)
    }
});

router.route('/clamav/scan').post(async (req, res, next) => {
    const errorMessage = checkParams(req);

    if (errorMessage) {
        return res.status(400).json({
            success: false,
            data: {
                error: errorMessage,
            },
        });
    }

    let responses = [];
    const toScan = Array.isArray(req.files[process.env.APP_FORM_KEY]) ?
        req.files[process.env.APP_FORM_KEY] :
        [req.files[process.env.APP_FORM_KEY]];

    for (const file of toScan) {
        const formData = new FormData();
        formData.append(`file`, file.data, {
            filename: file.name,
            contentType: file.mimetype,
        });
        let data = await callService(formData, '/api/clamav/scan', 'clamAV-service');
        console.log(data)
        if(data) {
          data.service = "clamAV-service"
          responses.push(data);
        }
    }

    if(responses.length === 0) {
      res.status(500).json("error");
    } else {
      res.status(200).json(responses)
    }
});

module.exports = router;