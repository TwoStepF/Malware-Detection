const NodeClam = require('clamscan');
const cors = require('cors');
const express = require('express');
const morgan = require('morgan');
const fileUpload = require('express-fileupload');
const axios = require('axios');

const versionRouter = require('./routes/version');
const scanRouter = require('./routes/scan');
const dbSignaturesRouter = require('./routes/dbsignatures');

async function makeServer(cfg) {
  try {
    const newAvConfig = Object.assign({}, cfg.avConfig);
    const clamscan = await new NodeClam().init(newAvConfig);
    const PORT = process.env.APP_PORT || 3000;
    const SERVER_NAME = process.env.SERVER_NAME || ""
    const app = express();

    app.use(cors());
    // app.use(bodyParser.json());
    // app.use(bodyParser.urlencoded({ extended: true }));
    app.use((req, res, next) => {
      req._av = clamscan;
      next();
    });

    app.use(fileUpload({ ...cfg.fuConfig }));
    process.env.NODE_ENV !== 'test' &&
      app.use(morgan(process.env.APP_MORGAN_LOG_FORMAT || 'combined'));
    app.use('/api/v1/version', versionRouter);
    app.use('/api/clamav/scan', scanRouter);
    app.all('*', (req, res, next) => {
      res.status(405).json({ success: false, data: { error: 'Not allowed.' } });
    });

    const srv = app.listen(PORT, () => {
      const oneDayMilliseconds = 24 * 60 * 60 * 1000;
      setInterval(() => {dbSignaturesRouter(clamscan)}, oneDayMilliseconds);
      const registerService = () => axios.put(`http://localhost:3001/seviceRegistry/registry/${SERVER_NAME}/${PORT}`);
      const unregisterService = async () => await axios.delete(`http://localhost:3001/seviceRegistry/unregister/${SERVER_NAME}/${PORT}`);
    
      registerService();
    
      // const interval = setInterval(registerService, 20 * 1000);

      // const cleanup = async () => {
      //   clearInterval(interval);
      //   await unregisterService();
      // }
    
      process.on('SIGINT', async () => {
        await unregisterService();
        process.exit(0);
      });
    
      process.on('SIGTERM', async () => {
        unregisterService();
        process.exit(0);
      });
    
      process.env.NODE_ENV !== 'test' &&
        console.log(`Server started on PORT: ${PORT}`);
    });

    return srv;
  } catch (error) {
    throw new Error(`Cannot initialize clamav object: ${error}`);
  }
}

module.exports = { makeServer };
